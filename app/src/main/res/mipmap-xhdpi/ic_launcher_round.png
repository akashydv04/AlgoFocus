package ak.gunsariyas.apnidukan.activity;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;

import android.app.ProgressDialog;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.android.material.textfield.TextInputEditText;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.OnProgressListener;
import com.google.firebase.storage.StorageReference;
import com.google.firebase.storage.UploadTask;

import ak.gunsariyas.apnidukan.R;
import ak.gunsariyas.apnidukan.model.ItemsModel;

public class AddItems extends AppCompatActivity implements View.OnClickListener {

    private Toolbar toolbar;
    private static final int REQUEST_CODE= 123;
    private TextView title_page;
    private ImageButton back_btn;
    private TextInputEditText itemName_edt, quantityItem_edt, sellingPrice_edt, itemDescription_edt, itemImageUrl_edt;
    private String name, quantity, price, description, image_url;
    private Button addItem_btn;
    private Spinner category_spin;
    private String[] itemCat = {"Select Category", "Packing", "Loose Packing"};
    private Uri uri;
    private DatabaseReference dbRef;
    private FirebaseDatabase fireDb;
    private StorageReference storeRef;
    private ItemsModel itemsModel;
    private ProgressDialog progressDialog;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_add_items);

        init();
        setSupportActionBar(toolbar);
        title_page.setText(R.string.add_items);

        //firebase initialize
        firebaseInit();
        itemsModel = new ItemsModel();
        progressDialog = new ProgressDialog(this);

        ArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, itemCat);
        category_spin.setAdapter(adapter);

        back_btn.setOnClickListener(this);
        itemImageUrl_edt.setOnClickListener(this);
        addItem_btn.setOnClickListener(this);

    }

    private void itemDataString() {

        name = itemName_edt.getText().toString().trim();
        quantity = quantityItem_edt.getText().toString().trim();
        price = sellingPrice_edt.getText().toString().trim();
        description = itemDescription_edt.getText().toString().trim();
    }

    private void firebaseInit() {

        fireDb = FirebaseDatabase.getInstance();
        dbRef = fireDb.getReference();
        storeRef = FirebaseStorage.getInstance().getReference();
    }

    private void init() {
        //custom toolbar widgets
        toolbar = findViewById(R.id.custom_toolbar);
        title_page = findViewById(R.id.title_toolbar);
        back_btn = findViewById(R.id.back_btn);

        //current activity widgets
        itemName_edt = findViewById(R.id.item_name_edt);
        quantityItem_edt = findViewById(R.id.item_quantity_edt);
        sellingPrice_edt = findViewById(R.id.item_price_edt);
        itemDescription_edt = findViewById(R.id.item_description_edt);
        itemImageUrl_edt = findViewById(R.id.item_image_url_edt);
        category_spin = findViewById(R.id.category_items);
        addItem_btn = findViewById(R.id.add_item_btn);
    }

    @Override
    public void onClick(View view) {
        if (view.getId() == R.id.back_btn){
            super.onBackPressed();
        }
        if (view.getId() == R.id.item_image_url_edt){
            Intent intent = new Intent();
            intent.setAction(Intent.ACTION_GET_CONTENT);
            intent.setType("image/*");
            startActivityForResult(Intent.createChooser(intent, "image"),REQUEST_CODE);
        }
        if (view.getId() == R.id.add_item_btn){
            itemDataString();
            itemsData();

            if (name.isEmpty()){
                itemName_edt.setError("Required");
                itemName_edt.requestFocus();
                return;
            }
            if (quantity.isEmpty()){
                quantityItem_edt.setError("Required");
                quantityItem_edt.requestFocus();
                return;
            }
            if (price.isEmpty()){
                sellingPrice_edt.setError("Required");
                sellingPrice_edt.requestFocus();
                return;
            }
            if (description.isEmpty()){
                itemDescription_edt.setError("Required");
                itemDescription_edt.requestFocus();
                return;
            }
            if (category_spin.getSelectedItem().equals("Select Category")){
                Toast.makeText(this, "Select Category first", Toast.LENGTH_SHORT).show();
            }else {
                final String category = category_spin.getSelectedItem().toString();
                progressDialog.setTitle("Uploading");
                progressDialog.show();

                StorageReference reference = storeRef.child(category+"/"+name+System.currentTimeMillis()+".jpg");
                reference.putFile(uri).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {
                    @Override
                    public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {
                        Task<Uri> uriTask = taskSnapshot.getStorage().getDownloadUrl();
                        while (!uriTask.isComplete());

                        Uri url = uriTask.getResult();

                        itemsModel.setItemImageUrl(url.toString());
                        dbRef.child("Available Items"+category).child(name+price).setValue(itemsModel);
                        progressDialog.dismiss();
                    }
                }).addOnProgressListener(new OnProgressListener<UploadTask.TaskSnapshot>() {
                    @Override
                    public void onProgress(@NonNull UploadTask.TaskSnapshot taskSnapshot) {
                        double progressRate = (100* taskSnapshot.getBytesTransferred()/taskSnapshot.getTotalByteCount());
                        progressDialog.setMessage("Uploading "+progressRate+" %");
                        progressDialog.show();

                    }
                }).addOnFailureListener(new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {
                        progressDialog.dismiss();
                        Toast.makeText(AddItems.this, "error "+e, Toast.LENGTH_SHORT).show();

                    }
                });
            }
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == 